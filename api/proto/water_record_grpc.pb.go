// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: water_record.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WaterRecordService_CreateRecord_FullMethodName   = "/water_reminder.water_record.WaterRecordService/CreateRecord"
	WaterRecordService_GetRecords_FullMethodName     = "/water_reminder.water_record.WaterRecordService/GetRecords"
	WaterRecordService_GetTodayIntake_FullMethodName = "/water_reminder.water_record.WaterRecordService/GetTodayIntake"
)

// WaterRecordServiceClient is the client API for WaterRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaterRecordServiceClient interface {
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error)
	GetTodayIntake(ctx context.Context, in *GetTodayIntakeRequest, opts ...grpc.CallOption) (*GetTodayIntakeResponse, error)
}

type waterRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaterRecordServiceClient(cc grpc.ClientConnInterface) WaterRecordServiceClient {
	return &waterRecordServiceClient{cc}
}

func (c *waterRecordServiceClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, WaterRecordService_CreateRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRecordServiceClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error) {
	out := new(GetRecordsResponse)
	err := c.cc.Invoke(ctx, WaterRecordService_GetRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waterRecordServiceClient) GetTodayIntake(ctx context.Context, in *GetTodayIntakeRequest, opts ...grpc.CallOption) (*GetTodayIntakeResponse, error) {
	out := new(GetTodayIntakeResponse)
	err := c.cc.Invoke(ctx, WaterRecordService_GetTodayIntake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaterRecordServiceServer is the server API for WaterRecordService service.
// All implementations must embed UnimplementedWaterRecordServiceServer
// for forward compatibility
type WaterRecordServiceServer interface {
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error)
	GetTodayIntake(context.Context, *GetTodayIntakeRequest) (*GetTodayIntakeResponse, error)
	mustEmbedUnimplementedWaterRecordServiceServer()
}

// UnimplementedWaterRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWaterRecordServiceServer struct {
}

func (UnimplementedWaterRecordServiceServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedWaterRecordServiceServer) GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedWaterRecordServiceServer) GetTodayIntake(context.Context, *GetTodayIntakeRequest) (*GetTodayIntakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodayIntake not implemented")
}
func (UnimplementedWaterRecordServiceServer) mustEmbedUnimplementedWaterRecordServiceServer() {}

// UnsafeWaterRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaterRecordServiceServer will
// result in compilation errors.
type UnsafeWaterRecordServiceServer interface {
	mustEmbedUnimplementedWaterRecordServiceServer()
}

func RegisterWaterRecordServiceServer(s grpc.ServiceRegistrar, srv WaterRecordServiceServer) {
	s.RegisterService(&WaterRecordService_ServiceDesc, srv)
}

func _WaterRecordService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRecordServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRecordService_CreateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRecordServiceServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRecordService_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRecordServiceServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRecordService_GetRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRecordServiceServer).GetRecords(ctx, req.(*GetRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaterRecordService_GetTodayIntake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodayIntakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaterRecordServiceServer).GetTodayIntake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaterRecordService_GetTodayIntake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaterRecordServiceServer).GetTodayIntake(ctx, req.(*GetTodayIntakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WaterRecordService_ServiceDesc is the grpc.ServiceDesc for WaterRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaterRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "water_reminder.water_record.WaterRecordService",
	HandlerType: (*WaterRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _WaterRecordService_CreateRecord_Handler,
		},
		{
			MethodName: "GetRecords",
			Handler:    _WaterRecordService_GetRecords_Handler,
		},
		{
			MethodName: "GetTodayIntake",
			Handler:    _WaterRecordService_GetTodayIntake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "water_record.proto",
}
